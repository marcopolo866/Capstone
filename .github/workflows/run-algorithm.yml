name: Run Algorithm

on:
  workflow_dispatch:
    inputs:
      algorithm:
        description: 'Algorithm to run'
        required: true
        type: choice
        options:
          - dijkstra
          - glasgow
          - vf3
      input_files:
        description: 'Comma-separated input file paths'
        required: true
        type: string
      request_id:
        description: 'Client request identifier'
        required: false
        type: string

jobs:
  run-algorithm:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      actions: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Cache Glasgow build
        uses: actions/cache@v3
        with:
          path: baselines/glasgow-subgraph-solver/build
          key: ${{ runner.os }}-glasgow-${{ hashFiles('baselines/glasgow-subgraph-solver/**') }}
          restore-keys: |
            ${{ runner.os }}-glasgow-
      
      - name: Install dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -qq
          sudo apt-get install -y -qq --no-install-recommends build-essential cmake jq
      
      - name: Build algorithms
        run: |
          echo "Building algorithms..."
          
          # Build Dijkstra
          if [ -f "baselines/Dijkastra Shortest Path/dijkstra_main.cpp" ]; then
            echo "Building Dijkstra..."
            g++ -std=c++17 \
              -I "baselines/Dijkastra Shortest Path" \
              "baselines/Dijkastra Shortest Path/dijkstra_main.cpp" \
              "baselines/Dijkastra Shortest Path/dijkstra.cpp" \
              -o "baselines/dijkstra"
            echo "✓ Dijkstra built successfully"
          fi
          
          # Build Glasgow Subgraph Solver
          if [ -d "baselines/glasgow-subgraph-solver" ]; then
            if [ ! -f "baselines/glasgow-subgraph-solver/build/glasgow_subgraph_solver" ]; then
              echo "Building Glasgow Subgraph Solver..."
              cd baselines/glasgow-subgraph-solver
              mkdir -p build
              cd build
              cmake .. -DCMAKE_BUILD_TYPE=Release
              make -j$(nproc)
              cd ../../..
              echo "✓ Glasgow built successfully"
            else
              echo "✓ Glasgow already built (using cached version)"
            fi
          fi
          
          echo "Build complete!"
      
      - name: Run algorithm
        id: run
        run: |
          ALGORITHM="${{ github.event.inputs.algorithm }}"
          INPUT_FILES="${{ github.event.inputs.input_files }}"
          
          echo "Running $ALGORITHM with files: $INPUT_FILES"
          
          mkdir -p outputs
          
          # Parse input files
          IFS=',' read -ra FILES <<< "$INPUT_FILES"
          
          # Run the appropriate algorithm
          set +e
          case $ALGORITHM in
            dijkstra)
              if [ ! -x "./baselines/dijkstra" ]; then
                echo "Dijkstra binary missing - rebuilding..."
                g++ -std=c++17 \
                  -I "baselines/Dijkastra Shortest Path" \
                  "baselines/Dijkastra Shortest Path/dijkstra_main.cpp" \
                  "baselines/Dijkastra Shortest Path/dijkstra.cpp" \
                  -o baselines/dijkstra
              fi
              if [ ! -x "./baselines/dijkstra" ]; then
                echo "Failed to build Dijkstra binary" > outputs/result.txt
                false
              else
                ./baselines/dijkstra "${FILES[0]}" > outputs/result.txt 2>&1
              fi
              ;;
            glasgow)
              ./baselines/glasgow-subgraph-solver/build/glasgow_subgraph_solver "${FILES[0]}" "${FILES[1]}" --format lad > outputs/result.txt 2>&1
              ;;
            vf3)
              ./baselines/vf3/bin/vf3 "${FILES[0]}" "${FILES[1]}" > outputs/result.txt 2>&1
              ;;
            *)
              echo "Unknown algorithm: $ALGORITHM"
              exit 1
              ;;
          esac
          
          EXIT_CODE=$?
          set -e
          echo "EXIT_CODE=$EXIT_CODE" >> $GITHUB_OUTPUT
      
      - name: Create result JSON
        run: |
          ALGORITHM="${{ github.event.inputs.algorithm }}"
          EXIT_CODE="${{ steps.run.outputs.EXIT_CODE }}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          REQUEST_ID="${{ github.event.inputs.request_id }}"
          
          if [ "$EXIT_CODE" = "0" ]; then
            STATUS="success"
            OUTPUT=$(cat outputs/result.txt 2>/dev/null || echo "No output")
            ERROR=""
          else
            STATUS="error"
            OUTPUT=""
            ERROR=$(cat outputs/result.txt 2>/dev/null || echo "Unknown error")
          fi
          
          # Create JSON with proper escaping
          jq -n \
            --arg algo "$ALGORITHM" \
            --arg ts "$TIMESTAMP" \
            --arg status "$STATUS" \
            --arg output "$OUTPUT" \
            --arg error "$ERROR" \
            --arg requestId "$REQUEST_ID" \
            '{
              algorithm: $algo,
              timestamp: $ts,
              status: $status,
              output: $output,
              error: $error,
              request_id: $requestId
            }' > outputs/result.json
      
      - name: Commit results
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add outputs/result.json
          git commit -m "Add algorithm results [skip ci]" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}